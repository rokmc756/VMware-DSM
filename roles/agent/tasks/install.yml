---
#
- name: Gather only virtual machines registered
  vmware_vm_info:
    hostname: '{{ vcenter.hostname }}'
    username: '{{ vcenter.username }}'
    password: '{{ vcenter.password }}'
    vm_type: vm
    validate_certs: 'no'
  delegate_to: localhost
  register: vm_info

#
- name: Set fact for the name of DSM Agent VM
  set_fact:
    dsm_agent_vm_name: "{{ ( vm_info.virtual_machines | select('search', prefix_dsm_agent_vm_name) | list | string ) }}"

#
- debug:
    msg: "{{ prefix_dsm_agent_vm_name }}"

#
- debug:
    msg: "{{ dsm_agent_vm_name }}"

#
- name: Deploy VMware DSM Agent VM
  vmware_deploy_ovf:
    hostname: '{{ vcenter.hostname }}'
    username: '{{ vcenter.username }}'
    password: '{{ vcenter.password }}'
    ovf: '{{ dsm_agent_ova_file }}'
    datacenter: '{{ vcenter.datacenter }}'
    cluster: '{{ vcenter.cluster }}'
    datastore: '{{ vcenter.datastore }}'
    folder: '{{ dsm.agent.folder_name }}'
    wait_for_ip_address: 'no'
    validate_certs: 'no'
    inject_ovf_env: true
    networks: "{ 'Management Network' : 'VM Network', 'VM Network' : 'Internal VM Network' }"
    fail_on_spec_warnings: 'yes'
    disk_provisioning: 'thin'
    power_on: 'no'
    properties:
      DeploymentOption.value: '{{ dsm_agent_size }}'
      vaadmin_password: '{{ dsm.agent.vm_password }}'
      varoot_password: '{{ dsm.agent.vm_password }}'
      provider_ip: '{{ dsm.provider.eth0_ipaddr }}'
      provider_username: '{{ dsm.agent.provider_username }}'
      provider_password: '{{ dsm.agent.provider_password }}'
      agent_vm_name: '{{ dsm_agent_vm_name }}'
      provider_api_cert: ''
      vami.ip0.DMS_Agent_VA: '{{ dsm.agent.eth0_ipaddr }}'
      vami.netmask0.DMS_Agent_VA: '{{ dsm.agent.netmask }}'
      vami.ip1.DMS_Agent_VA: '{{ dsm.agent.eth1_ipaddr }}'
      vami.netmask1.DMS_Agent_VA: '{{ dsm.agent.netmask }}'
      vami.gateway.DMS_Agent_VA: '{{ dsm.agent.gateway }}'
      vami.DNS.DMS_Agent_VA: '{{ dsm.agent.dns }}'
      vami.ntp.DMS_Agent_VA: '{{ dsm.agent.ntp }}'
      vm.vmname: ''
  delegate_to: localhost
  when: ( deploy_ovf == true ) and ( prefix_dsm_agent_vm_name not in dsm_agent_vm_name )

#
- name: Gather only virtual machines registered
  vmware_vm_info:
    hostname: '{{ vcenter.hostname }}'
    username: '{{ vcenter.username }}'
    password: '{{ vcenter.password }}'
    vm_type: vm
    validate_certs: 'no'
  delegate_to: localhost
  register: vm_info

#
- name: Set fact for the name of VMware DSM Agent VM
  set_fact:
    dsm_agent_vm_name: "{{ ( vm_info.virtual_machines | select('search', prefix_dsm_agent_vm_name ) | list | string | split(' '))[1] | regex_replace('\"', '') | regex_replace(\"'\", '')  | regex_replace(',', '') }}"
    # dsm_agent_vm_name: "{{ ( vm_info.virtual_machines | select('search', _dsm_agent_vm_name  ) | list | string | split(' '))[1] | regex_replace('\"', '') | regex_replace(\"'\", '')  | regex_replace(',', '') }}"

#
- debug:
    msg: "{{ dsm_agent_vm_name }}"

#
- name: Add second network adapter into VMware DSM Agent VM
  vmware_guest_network:
    name: "{{ dsm_agent_vm_name }}"
    hostname: "{{ vcenter.hostname }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    state: present
    network_name: "{{ item.network_name | default(omit) }}"
    connected: "{{ item.connected | default(omit) }}"
    device_type: "{{ item.device_type | default(omit) }}"
    validate_certs: "no"
    # vlan_id: "{{ item.vlan_id | default(omit) }}"
  loop:
    - network_name: 'Internal VM Network'
      device_type: 'e1000e'
      connected: true
    #- network_name: 'VM Network'
    #- vlan_id: 0
    #  connected: false
  when: ( add_new_network_adapter == true ) and ( prefix_dsm_agent_vm_name in dsm_agent_vm_name )

#
- name: Power VMware DSM Agent VM On
  vmware_guest_powerstate:
    hostname: "{{ vcenter.hostname }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    name: "{{ dsm_agent_vm_name }}"
    validate_certs: "no"
    state: powered-on
  when: ( add_new_network_adapter == true ) and ( prefix_dsm_agent_vm_name in dsm_agent_vm_name )

#
- name: Pause ansible playbook for 120 second pause until VMware DSM Agent VM comes up
  pause:
    seconds: 120
  when: ( add_new_network_adapter == true ) and ( prefix_dsm_agent_vm_name in dsm_agent_vm_name )

#
- name: Copy second network configuration file into VMware DSM Agent VM
  vmware_guest_file_operation:
    hostname: "{{ vcenter.hostname }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    vm_id: "{{ dsm_agent_vm_name }}"
    vm_username: "{{ dsm.agent.vm_user }}"
    vm_password: "{{ dsm.agent.vm_password }}"
    validate_certs: "no"
    copy:
        src: "roles/agent/templates/09-eth1.network"
        dest: "/etc/systemd/network/09-eth1.network"
        overwrite: true
  delegate_to: localhost
  when: ( configure_new_network == true ) and ( prefix_dsm_agent_vm_name in dsm_agent_vm_name )

# https://www.linkedin.com/pulse/how-configure-networking-photon-os-network-config-manager-sahani/
- name: Run relevant commands to apply new network configuration in VMware DSM Agent VM
  vmware_vm_shell:
    hostname: "{{ esxi.ipaddr }}"
    username: "{{ esxi.username }}"
    password: "{{ esxi.password }}"
    vm_id: "{{ dsm_agent_vm_name }}"
    vm_username: "{{ dsm.agent.vm_user }}"
    vm_password: "{{ dsm.agent.vm_password }}"
    vm_shell: "{{ item.shell }}"
    vm_shell_args: "{{ item.args }}"
    validate_certs: "no"
  loop:
    - { shell: "/usr/bin/chmod", args: "644 /etc/systemd/network/09-eth1.network" }
    - { shell: "/usr/bin/chown", args: "systemd-network:systemd-network /etc/systemd/network/09-eth1.network" }
    - { shell: "/usr/bin/systemctl", args: "daemon-reload" }
    - { shell: "/usr/bin/systemctl", args: "restart systemd-networkd" }
  delegate_to: localhost
  when: ( configure_new_network == true ) and ( prefix_dsm_agent_vm_name in dsm_agent_vm_name )


#- name: Wait for vCenter
#  vmware_about_facts:
#    hostname: '{{ vcenter_address }}'
#    username: 'administrator@vsphere.local'
#    password: '{{ vcenter_password }}'
#    validate_certs: no
#  delegate_to: localhost
#  retries: 20
#  delay: 60
#  register: result
#  until: result is succeeded
