---
#
- name: Gather only virtual machines registered
  vmware_vm_info:
    hostname: '{{ vcenter.hostname }}'
    username: '{{ vcenter.username }}'
    password: '{{ vcenter.password }}'
    vm_type: vm
    validate_certs: 'no'
  delegate_to: localhost
  register: vm_info

#
- name: Set fact for the name of DSM Provider VM
  set_fact:
    dsm_provider_vm_name: "{{ vm_info.virtual_machines | select('search', prefix_dsm_provider_vm_name ) | list | string }}"   # It's only for determining if virtual machines exists

#
- debug:
    msg: "{{ prefix_dsm_provider_vm_name }}"

#
- debug:
    msg: "{{ dsm_provider_vm_name }}"

#
- name: Deploy VMware DSM Provider VM
  vmware_deploy_ovf:
    hostname: '{{ vcenter.hostname }}'
    username: '{{ vcenter.username }}'
    password: '{{ vcenter.password }}'
    ovf: '{{ dsm_provider_ova_file }}'
    datacenter: '{{ vcenter.datacenter }}'
    cluster: '{{ vcenter.cluster }}'
    datastore: '{{ vcenter.datastore }}'
    # resource_pool: '{{ resourcepool_name }}'
    folder: '{{ dsm.provider.folder_name }}'
    wait_for_ip_address: 'no'
    validate_certs: 'no'
    inject_ovf_env: true
    # networks: "{ 'VM Network' : 'VM Network', 'Management Network' : 'Internal VM Network' }"
    networks: "{ 'Management Network' : 'VM Network', 'VM Network' : 'Internal VM Network' }"
    fail_on_spec_warnings: 'yes'
    disk_provisioning: 'thin'
    power_on: 'no'
    properties:
      DeploymentOption.value: 'tiny'
      vami.ip0.DMS_Provider_VA: '{{ dsm.provider.eth0_ipaddr }}'
      vami.netmask0.DMS_Provider_VA: '{{ dsm.provider.netmask }}'
      vami.ip1.DMS_Provider_VA: '{{ dsm.provider.eth1_ipaddr }}'
      vami.netmask1.DMS_Provider_VA: '{{ dsm.provider.netmask }}'
      vami.gateway.DMS_Provider_VA: '{{ dsm.provider.gateway }}'
      vami.DNS.DMS_Provider_VA: '{{ dsm.provider.dns }}'
      vami.ntp.DMS_Provider_VA: '{{ dsm.provider.ntp }}'
      guestinfo.cis.appliance.provider.password: '{{ dsm.provider.vm_password }}'
      vami.ceip.DMS_Provider_VA: ''
      vm.vmname: ''
  delegate_to: localhost
  when: ( deploy_ovf == true ) and ( prefix_dsm_provider_vm_name not in dsm_provider_vm_name )

#
- name: Gather only virtual machines registered
  vmware_vm_info:
    hostname: '{{ vcenter.hostname }}'
    username: '{{ vcenter.username }}'
    password: '{{ vcenter.password }}'
    vm_type: vm
    validate_certs: 'no'
  delegate_to: localhost
  register: vm_info

#
- name: Set fact for the name of DSM Provider VM
  set_fact:
    dsm_provider_vm_name: "{{ ( vm_info.virtual_machines | select('search', prefix_dsm_provider_vm_name ) | list | string | split(' '))[1] | regex_replace('\"', '') | regex_replace(\"'\", '')  | regex_replace(',', '') }}"

#
- debug:
    msg: "{{ dsm_provider_vm_name }}"

#
- name: Add secondary network adapter into VMware DSM Provider VM
  vmware_guest_network:
    name: "{{ dsm_provider_vm_name }}"
    hostname: "{{ vcenter.hostname }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    state: present
    network_name: "{{ item.network_name | default(omit) }}"
    connected: "{{ item.connected | default(omit) }}"
    device_type: "{{ item.device_type | default(omit) }}"
    validate_certs: "no"
    # vlan_id: "{{ item.vlan_id | default(omit) }}"
  loop:
    - network_name: 'Internal VM Network'
      device_type: 'e1000e'
      connected: true
    #- vlan_id: 0
    #  connected: false
  when: ( add_new_network_adapter == true ) and ( prefix_dsm_provider_vm_name in dsm_provider_vm_name )

#
- name: Power VMware DSM Provider VM on
  vmware_guest_powerstate:
    hostname: "{{ vcenter.hostname }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    name: "{{ dsm_provider_vm_name }}"
    validate_certs: "no"
    state: powered-on
  when: ( add_new_network_adapter == true ) and ( prefix_dsm_provider_vm_name in dsm_provider_vm_name )

#
- name: Pause ansible playbook for 20 second pause until VMware DSM Provider VM comes up
  pause:
    seconds: 120
  when: ( add_new_network_adapter == true ) and ( prefix_dsm_provider_vm_name in dsm_provider_vm_name )

#
- name: Copy second network configuration file into VMware DSM Provider VM
  vmware_guest_file_operation:
    hostname: "{{ vcenter.hostname }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    vm_id: "{{ dsm_provider_vm_name }}"
    vm_username: "{{ dsm.provider.vm_user }}"
    vm_password: "{{ dsm.provider.vm_password }}"
    validate_certs: "no"
    copy:
        src: "roles/provider/templates/09-eth1.network"
        dest: "/etc/systemd/network/09-eth1.network"
        overwrite: true
  delegate_to: localhost
  when: ( configure_new_network == true ) and ( prefix_dsm_provider_vm_name in dsm_provider_vm_name )

# https://www.linkedin.com/pulse/how-configure-networking-photon-os-network-config-manager-sahani/
- name: Run relevant commands to apply new network configuration in VMware DSM Provider VM
  vmware_vm_shell:
    hostname: "{{ esxi.ipaddr }}"
    username: "{{ esxi.username }}"
    password: "{{ esxi.password }}"
    vm_id: "{{ dsm_provider_vm_name }}"
    vm_username: "{{ dsm.provider.vm_user }}"
    vm_password: "{{ dsm.provider.vm_password }}"
    vm_shell: "{{ item.shell }}"
    vm_shell_args: "{{ item.args }}"
    validate_certs: "no"
  loop:
    - { shell: "/usr/bin/chmod", args: "644 /etc/systemd/network/09-eth1.network" }
    - { shell: "/usr/bin/chown", args: "systemd-network:systemd-network /etc/systemd/network/09-eth1.network" }
    - { shell: "/usr/bin/systemctl", args: "daemon-reload" }
    - { shell: "/usr/bin/systemctl", args: "restart systemd-networkd" }
    # - { shell: "/usr/bin/tdnf", args: "update -y" }
    #  /opt/vmware/share/vami/vami_set_network eth1 STATICV4 192.168.219.103 24 192.168.0.1
  delegate_to: localhost
  when: ( configure_new_network == true ) and ( prefix_dsm_provider_vm_name in dsm_provider_vm_name )

